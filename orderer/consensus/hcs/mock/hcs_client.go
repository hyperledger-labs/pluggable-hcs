// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"
	"time"

	hedera "github.com/hashgraph/hedera-sdk-go/v2"
	"github.com/hyperledger/fabric/orderer/consensus/hcs/factory"
)

type HcsClient struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	GetConsensusTopicInfoStub        func(*hedera.TopicID) (*hedera.TopicInfo, error)
	getConsensusTopicInfoMutex       sync.RWMutex
	getConsensusTopicInfoArgsForCall []struct {
		arg1 *hedera.TopicID
	}
	getConsensusTopicInfoReturns struct {
		result1 *hedera.TopicInfo
		result2 error
	}
	getConsensusTopicInfoReturnsOnCall map[int]struct {
		result1 *hedera.TopicInfo
		result2 error
	}
	GetTransactionReceiptStub        func(*hedera.TransactionID) (*hedera.TransactionReceipt, error)
	getTransactionReceiptMutex       sync.RWMutex
	getTransactionReceiptArgsForCall []struct {
		arg1 *hedera.TransactionID
	}
	getTransactionReceiptReturns struct {
		result1 *hedera.TransactionReceipt
		result2 error
	}
	getTransactionReceiptReturnsOnCall map[int]struct {
		result1 *hedera.TransactionReceipt
		result2 error
	}
	PingStub        func(*hedera.AccountID) error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct {
		arg1 *hedera.AccountID
	}
	pingReturns struct {
		result1 error
	}
	pingReturnsOnCall map[int]struct {
		result1 error
	}
	SubmitConsensusMessageStub        func([]byte, *hedera.TopicID, *hedera.TransactionID) (*hedera.TransactionID, error)
	submitConsensusMessageMutex       sync.RWMutex
	submitConsensusMessageArgsForCall []struct {
		arg1 []byte
		arg2 *hedera.TopicID
		arg3 *hedera.TransactionID
	}
	submitConsensusMessageReturns struct {
		result1 *hedera.TransactionID
		result2 error
	}
	submitConsensusMessageReturnsOnCall map[int]struct {
		result1 *hedera.TransactionID
		result2 error
	}
	SubscribeTopicStub        func(*hedera.TopicID, *time.Time, *time.Time) (factory.MirrorSubscriptionHandle, error)
	subscribeTopicMutex       sync.RWMutex
	subscribeTopicArgsForCall []struct {
		arg1 *hedera.TopicID
		arg2 *time.Time
		arg3 *time.Time
	}
	subscribeTopicReturns struct {
		result1 factory.MirrorSubscriptionHandle
		result2 error
	}
	subscribeTopicReturnsOnCall map[int]struct {
		result1 factory.MirrorSubscriptionHandle
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HcsClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *HcsClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *HcsClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *HcsClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *HcsClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *HcsClient) GetConsensusTopicInfo(arg1 *hedera.TopicID) (*hedera.TopicInfo, error) {
	fake.getConsensusTopicInfoMutex.Lock()
	ret, specificReturn := fake.getConsensusTopicInfoReturnsOnCall[len(fake.getConsensusTopicInfoArgsForCall)]
	fake.getConsensusTopicInfoArgsForCall = append(fake.getConsensusTopicInfoArgsForCall, struct {
		arg1 *hedera.TopicID
	}{arg1})
	fake.recordInvocation("GetConsensusTopicInfo", []interface{}{arg1})
	fake.getConsensusTopicInfoMutex.Unlock()
	if fake.GetConsensusTopicInfoStub != nil {
		return fake.GetConsensusTopicInfoStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getConsensusTopicInfoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HcsClient) GetConsensusTopicInfoCallCount() int {
	fake.getConsensusTopicInfoMutex.RLock()
	defer fake.getConsensusTopicInfoMutex.RUnlock()
	return len(fake.getConsensusTopicInfoArgsForCall)
}

func (fake *HcsClient) GetConsensusTopicInfoCalls(stub func(*hedera.TopicID) (*hedera.TopicInfo, error)) {
	fake.getConsensusTopicInfoMutex.Lock()
	defer fake.getConsensusTopicInfoMutex.Unlock()
	fake.GetConsensusTopicInfoStub = stub
}

func (fake *HcsClient) GetConsensusTopicInfoArgsForCall(i int) *hedera.TopicID {
	fake.getConsensusTopicInfoMutex.RLock()
	defer fake.getConsensusTopicInfoMutex.RUnlock()
	argsForCall := fake.getConsensusTopicInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HcsClient) GetConsensusTopicInfoReturns(result1 *hedera.TopicInfo, result2 error) {
	fake.getConsensusTopicInfoMutex.Lock()
	defer fake.getConsensusTopicInfoMutex.Unlock()
	fake.GetConsensusTopicInfoStub = nil
	fake.getConsensusTopicInfoReturns = struct {
		result1 *hedera.TopicInfo
		result2 error
	}{result1, result2}
}

func (fake *HcsClient) GetConsensusTopicInfoReturnsOnCall(i int, result1 *hedera.TopicInfo, result2 error) {
	fake.getConsensusTopicInfoMutex.Lock()
	defer fake.getConsensusTopicInfoMutex.Unlock()
	fake.GetConsensusTopicInfoStub = nil
	if fake.getConsensusTopicInfoReturnsOnCall == nil {
		fake.getConsensusTopicInfoReturnsOnCall = make(map[int]struct {
			result1 *hedera.TopicInfo
			result2 error
		})
	}
	fake.getConsensusTopicInfoReturnsOnCall[i] = struct {
		result1 *hedera.TopicInfo
		result2 error
	}{result1, result2}
}

func (fake *HcsClient) GetTransactionReceipt(arg1 *hedera.TransactionID) (*hedera.TransactionReceipt, error) {
	fake.getTransactionReceiptMutex.Lock()
	ret, specificReturn := fake.getTransactionReceiptReturnsOnCall[len(fake.getTransactionReceiptArgsForCall)]
	fake.getTransactionReceiptArgsForCall = append(fake.getTransactionReceiptArgsForCall, struct {
		arg1 *hedera.TransactionID
	}{arg1})
	fake.recordInvocation("GetTransactionReceipt", []interface{}{arg1})
	fake.getTransactionReceiptMutex.Unlock()
	if fake.GetTransactionReceiptStub != nil {
		return fake.GetTransactionReceiptStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransactionReceiptReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HcsClient) GetTransactionReceiptCallCount() int {
	fake.getTransactionReceiptMutex.RLock()
	defer fake.getTransactionReceiptMutex.RUnlock()
	return len(fake.getTransactionReceiptArgsForCall)
}

func (fake *HcsClient) GetTransactionReceiptCalls(stub func(*hedera.TransactionID) (*hedera.TransactionReceipt, error)) {
	fake.getTransactionReceiptMutex.Lock()
	defer fake.getTransactionReceiptMutex.Unlock()
	fake.GetTransactionReceiptStub = stub
}

func (fake *HcsClient) GetTransactionReceiptArgsForCall(i int) *hedera.TransactionID {
	fake.getTransactionReceiptMutex.RLock()
	defer fake.getTransactionReceiptMutex.RUnlock()
	argsForCall := fake.getTransactionReceiptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HcsClient) GetTransactionReceiptReturns(result1 *hedera.TransactionReceipt, result2 error) {
	fake.getTransactionReceiptMutex.Lock()
	defer fake.getTransactionReceiptMutex.Unlock()
	fake.GetTransactionReceiptStub = nil
	fake.getTransactionReceiptReturns = struct {
		result1 *hedera.TransactionReceipt
		result2 error
	}{result1, result2}
}

func (fake *HcsClient) GetTransactionReceiptReturnsOnCall(i int, result1 *hedera.TransactionReceipt, result2 error) {
	fake.getTransactionReceiptMutex.Lock()
	defer fake.getTransactionReceiptMutex.Unlock()
	fake.GetTransactionReceiptStub = nil
	if fake.getTransactionReceiptReturnsOnCall == nil {
		fake.getTransactionReceiptReturnsOnCall = make(map[int]struct {
			result1 *hedera.TransactionReceipt
			result2 error
		})
	}
	fake.getTransactionReceiptReturnsOnCall[i] = struct {
		result1 *hedera.TransactionReceipt
		result2 error
	}{result1, result2}
}

func (fake *HcsClient) Ping(arg1 *hedera.AccountID) error {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct {
		arg1 *hedera.AccountID
	}{arg1})
	fake.recordInvocation("Ping", []interface{}{arg1})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pingReturns
	return fakeReturns.result1
}

func (fake *HcsClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *HcsClient) PingCalls(stub func(*hedera.AccountID) error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = stub
}

func (fake *HcsClient) PingArgsForCall(i int) *hedera.AccountID {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	argsForCall := fake.pingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *HcsClient) PingReturns(result1 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *HcsClient) PingReturnsOnCall(i int, result1 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *HcsClient) SubmitConsensusMessage(arg1 []byte, arg2 *hedera.TopicID, arg3 *hedera.TransactionID) (*hedera.TransactionID, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.submitConsensusMessageMutex.Lock()
	ret, specificReturn := fake.submitConsensusMessageReturnsOnCall[len(fake.submitConsensusMessageArgsForCall)]
	fake.submitConsensusMessageArgsForCall = append(fake.submitConsensusMessageArgsForCall, struct {
		arg1 []byte
		arg2 *hedera.TopicID
		arg3 *hedera.TransactionID
	}{arg1Copy, arg2, arg3})
	fake.recordInvocation("SubmitConsensusMessage", []interface{}{arg1Copy, arg2, arg3})
	fake.submitConsensusMessageMutex.Unlock()
	if fake.SubmitConsensusMessageStub != nil {
		return fake.SubmitConsensusMessageStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitConsensusMessageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HcsClient) SubmitConsensusMessageCallCount() int {
	fake.submitConsensusMessageMutex.RLock()
	defer fake.submitConsensusMessageMutex.RUnlock()
	return len(fake.submitConsensusMessageArgsForCall)
}

func (fake *HcsClient) SubmitConsensusMessageCalls(stub func([]byte, *hedera.TopicID, *hedera.TransactionID) (*hedera.TransactionID, error)) {
	fake.submitConsensusMessageMutex.Lock()
	defer fake.submitConsensusMessageMutex.Unlock()
	fake.SubmitConsensusMessageStub = stub
}

func (fake *HcsClient) SubmitConsensusMessageArgsForCall(i int) ([]byte, *hedera.TopicID, *hedera.TransactionID) {
	fake.submitConsensusMessageMutex.RLock()
	defer fake.submitConsensusMessageMutex.RUnlock()
	argsForCall := fake.submitConsensusMessageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *HcsClient) SubmitConsensusMessageReturns(result1 *hedera.TransactionID, result2 error) {
	fake.submitConsensusMessageMutex.Lock()
	defer fake.submitConsensusMessageMutex.Unlock()
	fake.SubmitConsensusMessageStub = nil
	fake.submitConsensusMessageReturns = struct {
		result1 *hedera.TransactionID
		result2 error
	}{result1, result2}
}

func (fake *HcsClient) SubmitConsensusMessageReturnsOnCall(i int, result1 *hedera.TransactionID, result2 error) {
	fake.submitConsensusMessageMutex.Lock()
	defer fake.submitConsensusMessageMutex.Unlock()
	fake.SubmitConsensusMessageStub = nil
	if fake.submitConsensusMessageReturnsOnCall == nil {
		fake.submitConsensusMessageReturnsOnCall = make(map[int]struct {
			result1 *hedera.TransactionID
			result2 error
		})
	}
	fake.submitConsensusMessageReturnsOnCall[i] = struct {
		result1 *hedera.TransactionID
		result2 error
	}{result1, result2}
}

func (fake *HcsClient) SubscribeTopic(arg1 *hedera.TopicID, arg2 *time.Time, arg3 *time.Time) (factory.MirrorSubscriptionHandle, error) {
	fake.subscribeTopicMutex.Lock()
	ret, specificReturn := fake.subscribeTopicReturnsOnCall[len(fake.subscribeTopicArgsForCall)]
	fake.subscribeTopicArgsForCall = append(fake.subscribeTopicArgsForCall, struct {
		arg1 *hedera.TopicID
		arg2 *time.Time
		arg3 *time.Time
	}{arg1, arg2, arg3})
	fake.recordInvocation("SubscribeTopic", []interface{}{arg1, arg2, arg3})
	fake.subscribeTopicMutex.Unlock()
	if fake.SubscribeTopicStub != nil {
		return fake.SubscribeTopicStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.subscribeTopicReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *HcsClient) SubscribeTopicCallCount() int {
	fake.subscribeTopicMutex.RLock()
	defer fake.subscribeTopicMutex.RUnlock()
	return len(fake.subscribeTopicArgsForCall)
}

func (fake *HcsClient) SubscribeTopicCalls(stub func(*hedera.TopicID, *time.Time, *time.Time) (factory.MirrorSubscriptionHandle, error)) {
	fake.subscribeTopicMutex.Lock()
	defer fake.subscribeTopicMutex.Unlock()
	fake.SubscribeTopicStub = stub
}

func (fake *HcsClient) SubscribeTopicArgsForCall(i int) (*hedera.TopicID, *time.Time, *time.Time) {
	fake.subscribeTopicMutex.RLock()
	defer fake.subscribeTopicMutex.RUnlock()
	argsForCall := fake.subscribeTopicArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *HcsClient) SubscribeTopicReturns(result1 factory.MirrorSubscriptionHandle, result2 error) {
	fake.subscribeTopicMutex.Lock()
	defer fake.subscribeTopicMutex.Unlock()
	fake.SubscribeTopicStub = nil
	fake.subscribeTopicReturns = struct {
		result1 factory.MirrorSubscriptionHandle
		result2 error
	}{result1, result2}
}

func (fake *HcsClient) SubscribeTopicReturnsOnCall(i int, result1 factory.MirrorSubscriptionHandle, result2 error) {
	fake.subscribeTopicMutex.Lock()
	defer fake.subscribeTopicMutex.Unlock()
	fake.SubscribeTopicStub = nil
	if fake.subscribeTopicReturnsOnCall == nil {
		fake.subscribeTopicReturnsOnCall = make(map[int]struct {
			result1 factory.MirrorSubscriptionHandle
			result2 error
		})
	}
	fake.subscribeTopicReturnsOnCall[i] = struct {
		result1 factory.MirrorSubscriptionHandle
		result2 error
	}{result1, result2}
}

func (fake *HcsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.getConsensusTopicInfoMutex.RLock()
	defer fake.getConsensusTopicInfoMutex.RUnlock()
	fake.getTransactionReceiptMutex.RLock()
	defer fake.getTransactionReceiptMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.submitConsensusMessageMutex.RLock()
	defer fake.submitConsensusMessageMutex.RUnlock()
	fake.subscribeTopicMutex.RLock()
	defer fake.subscribeTopicMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HcsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
